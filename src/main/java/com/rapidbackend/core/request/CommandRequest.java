package com.rapidbackend.core.request;

import java.util.HashMap;

import com.rapidbackend.core.process.ProcessStatus;
import com.rapidbackend.core.request.RequestBase.HandleInfo;
import com.rapidbackend.security.session.SessionBase;
import com.rapidbackend.socialutil.model.reserved.UserBase;
/**
 * 
 * @author chiqiu
 *
 */
public interface CommandRequest {
	
    //protected HashMap<String,Object> temporaryData = new HashMap<String,Object>();
    
    /**
     * get data related to this request, those data objects will be recycled after request is processed.
     * @return
     */
    @Deprecated
    public HashMap<String, Object> getTemporaryData() ;
    @Deprecated
    public void setTemporaryData(HashMap<String, Object> temporaryData) ;
    
    public void putTemporaryData(String name, Object value) ;
    
    public Object getTemporaryData(String name);

    public  String getRequestPath();
    
    public  Params getRequestParams();
    
    
    /**
     * whether we need to show the handle info of this request to user.
     * Set it to true if you want to debug the handle process. All the handle messages
     * generated by the handlers will be write to the response.
     * @return
     */
    public boolean isShowHandleInfo();
    
    public void setShowHandleInfo(boolean showInfo);
    /**
     * 
     * @return return the request itself, to enable a 'chain' style
     */
    public  CommandRequest addParam(CommandParam param);
    
    /**
     * return which commad handles this request
     * @return
     */
    public  String getCommand();
    
    public  void setCommand(String command);
    
    public  CommandParam getParam(String name);
    
    public  ProcessStatus getProcessStatus();
    
    public  void setProcessStatus(ProcessStatus status);
    /**
     * track handle infos
     * @param handleInfo
     */
    public  void trackHandleInfo(HandleInfo handleInfo);
    
    public HandleInfo getCurrentHandleInfo();
    
    public void setCurrentHandleInfo(HandleInfo handleInfo);
    /**
     * add information to request
     * @param message
     */
    public void addHandleInformation(String message);
    /**
     * 
     * @param create
     * @return a @SessionBase instance. When can't find any session bind to this request,  if create is set to true, create an empty session, otherwise return null
     */
    public SessionBase getSession(boolean create);
    public void setSession(SessionBase session);
    
    public String getRequestIpAddress();
    public void setRequestIpAddress(String ip);
    
    public void setUser(UserBase currentUser);
    public UserBase getUser();
    
}
