apply plugin: 'java'

apply plugin: 'eclipse'

description = "rapidbackend"

sourceCompatibility = 1.6
targetCompatibility = 1.6

[ compileJava, compileTestJava ]*.options*.encoding = 'UTF-8'

repositories {
        
     mavenCentral()
}

dependencies {
    compile group: 'redis.clients', name: 'jedis', version:'2.2.1'
    compile group: 'org.apache.shiro', name: 'shiro-core', version:'1.2.2'
    compile group: 'org.apache.shiro', name: 'shiro-web', version:'1.2.2'
    compile group: 'org.apache.shiro', name: 'shiro-ehcache', version:'1.2.2'
    compile group: 'org.apache.shiro', name: 'shiro-spring', version:'1.2.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.6.6'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.6.6'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version:'2.4.1'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.1'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.4'
    compile group: 'commons-collections', name: 'commons-collections', version:'3.2.1'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version:'1.2.2'
    compile group: 'commons-httpclient', name: 'commons-httpclient', version:'3.1'
    compile group: 'org.quartz-scheduler', name: 'quartz', version:'2.1.3'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version:'1.9.4'
    compile group: 'org.codehaus.jackson', name: 'jackson-smile', version:'1.9.4'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version:'1.9.4'
    compile group: 'org.codehaus.jackson', name: 'jackson-jaxrs', version:'1.9.4'
    compile group: 'org.codehaus.jackson', name: 'jackson-xc', version:'1.9.4'
    compile group: 'taglibs', name: 'standard', version:'1.1.2'
    compile group: 'javax.servlet', name: 'jstl', version:'1.1.2'
    compile group: 'javax.mail', name: 'mail', version:'1.4.3'
    compile group: 'mysql', name: 'mysql-connector-java', version:'5.1.18'
    compile group: 'net.sourceforge.nekohtml', name: 'nekohtml', version:'1.9.15'
    compile group: 'oro', name: 'oro', version:'2.0.8'
    compile group: 'xalan', name: 'xalan', version:'2.7.1'
    compile group: 'xerces', name: 'xercesImpl', version:'2.9.1'
    compile group: 'xml-apis', name: 'xml-apis', version:'1.3.04'
    compile group: 'asm', name: 'asm', version:'2.2.3'
    compile group: 'c3p0', name: 'c3p0', version:'0.9.1.2'
    compile group: 'com.googlecode.xmemcached', name: 'xmemcached', version:'1.3.5'
    compile(group: 'org.springframework', name: 'spring-jdbc', version:'3.1.4.RELEASE') {
exclude(module: 'commons-logging')
    }
    compile(group: 'org.springframework', name: 'spring-orm', version:'3.1.4.RELEASE') {
exclude(module: 'commons-logging')
    }
    compile(group: 'org.springframework', name: 'spring-webmvc', version:'3.1.4.RELEASE') {
exclude(module: 'commons-logging')
    }
    compile(group: 'org.apache.solr', name: 'solr', version:'4.0.0-ALPHA') {
exclude(module: 'slf4j-jdk14')
    }
    compile(group: 'org.apache.solr', name: 'solr-velocity', version:'4.0.0-ALPHA') {
exclude(module: 'slf4j-jdk14')
    }
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version:'8.1.4.v20120524'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version:'8.1.4.v20120524'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version:'8.1.4.v20120524'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version:'8.1.4.v20120524'
    compile group: 'io.netty', name: 'netty', version:'3.7.0.Final'
    compile group: 'com.carrotsearch.randomizedtesting', name: 'randomizedtesting-runner', version:'2.0.2'
    compile group: 'com.carrotsearch.randomizedtesting', name: 'junit4-maven-plugin', version:'2.0.2'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.19'
    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version:'1.3.2'
    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile(group: 'org.springframework', name: 'spring-test', version:'3.1.4.RELEASE') {
exclude(module: 'commons-logging')
    
    }
}

test {
    systemProperties 'file.encoding': 'UTF-8'


    forkEvery = 1 // important, because we load different resources in different tests
    
    systemProperty 'testing','true' // set this to true to inform rapidbackend to load testing resources
    
    reports.html.enabled = true
    
    maxHeapSize = "1024m"
}

task(startInstallServer,dependsOn: 'classes', type: JavaExec){
    
    main='com.rapidbackend.socialutil.install.webserver.InstallServer'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties 'file.encoding': 'UTF-8'
}

task(generateModels,dependsOn:'classes',type:JavaExec){
    main='com.rapidbackend.socialutil.install.webserver.GenerateModels'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties 'file.encoding': 'UTF-8'
}

task(compileModels,dependsOn:['generateModels'],type:Exec){
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine "./gradlew.bat", "compileJava" // testing build on windows
    } else {
        commandLine "gradle", "compileJava"
    }
    
}


task(generateServices,dependsOn: ['compileModels','classes'], type: JavaExec){
    
    main='com.rapidbackend.socialutil.install.webserver.GenerateServices'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties 'file.encoding': 'UTF-8'
    
}

//def killAllRedis = "ps aux | grep -ie redis | awk '{print $2}' | xargs kill -9"

task(startRedisInstances){
    def startScript = "src/main/resources/redis/startRedis.sh"
    def scriptFile = new File(startScript)
    if(!scriptFile.exists()){
        throw new RuntimeException("no startRedis script: "+startScript+ " found")
    }else{
        if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        scriptFile.setExecutable(true)
        if(!scriptFile.canExecute()){
            throw new RuntimeException("startRedis script: "+startScript + " doesn't have executable permission")
        }
        def command = """src/main/resources/redis/startRedis.sh"""
        def proc = command.execute()
        proc.waitFor()
        
        println(proc.exitValue())
       }
    }  
}

task(testInstallation,dependsOn:['generateServices','startRedisInstances','test']){
    
}

task(startRapidbackend,dependsOn:['startRedisInstances']){
    
}
